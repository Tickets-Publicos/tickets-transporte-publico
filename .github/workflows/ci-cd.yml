name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                      # Altere para sua região AWS
  NODE_VERSION: '22'
  PNPM_VERSION: '10.17.1'

permissions:
  contents: read

jobs:
  # Job de testes e build
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm check-types

      - name: Run tests (API)
        run: pnpm --filter nest test

      - name: Run e2e tests (API)
        run: pnpm --filter nest test:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Build applications
        run: pnpm build

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: |
            apps/api/dist
            apps/api/package.json
            apps/api/prisma
          retention-days: 1

      - name: Upload Web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: |
            apps/web/.next
            apps/web/package.json
            apps/web/public
          retention-days: 1

  # Job de deploy da API para ECS
  deploy-api:
    name: Deploy API to ECS
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    env:
      ECR_REPOSITORY_API: tickets-api              # Altere para o nome do seu repositório ECR
      ECS_SERVICE_API: tickets-api-service         # Altere para o nome do seu serviço ECS
      ECS_CLUSTER: tickets-cluster                 # Altere para o nome do seu cluster ECS
      ECS_TASK_DEFINITION_API: .aws/task-definition-api.json  # Caminho para task definition
      CONTAINER_NAME_API: tickets-api              # Nome do container na task definition

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push API image to Amazon ECR
        id: build-image-api
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/app/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
          container-name: ${{ env.CONTAINER_NAME_API }}
          image: ${{ steps.build-image-api.outputs.image }}

      - name: Deploy Amazon ECS task definition for API
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-api.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_API }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # Job de deploy do Web para ECS
  deploy-web:
    name: Deploy Web to ECS
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    env:
      ECR_REPOSITORY_WEB: tickets-web              # Altere para o nome do seu repositório ECR
      ECS_SERVICE_WEB: tickets-web-service         # Altere para o nome do seu serviço ECS
      ECS_CLUSTER: tickets-cluster                 # Altere para o nome do seu cluster ECS
      ECS_TASK_DEFINITION_WEB: .aws/task-definition-web.json  # Caminho para task definition
      CONTAINER_NAME_WEB: tickets-web              # Nome do container na task definition

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Web build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: apps/web

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Web image to Amazon ECR
        id: build-image-web
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/web/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_WEB:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_WEB }}
          container-name: ${{ env.CONTAINER_NAME_WEB }}
          image: ${{ steps.build-image-web.outputs.image }}

      - name: Deploy Amazon ECS task definition for Web
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-web.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_WEB }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
