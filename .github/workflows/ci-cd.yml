name: CI/CD Pipeline - EC2 Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.17.1'

permissions:
  contents: read

jobs:
  # Job de testes e build
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: apps/api

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm check-types

      - name: Run tests (API)
        run: pnpm --filter nest test

      - name: Run e2e tests (API)
        run: pnpm --filter nest test:e2e
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Build applications
        run: pnpm build

  # Job de deploy para EC2
  deploy-to-ec2:
    name: Deploy to EC2
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Navegar para o diretório do projeto
            cd /home/${{ secrets.EC2_USERNAME }}/tickets-transporte-publico
            
            # Fazer backup do .env
            cp .env .env.backup
            
            # Atualizar código
            git fetch origin
            git reset --hard origin/main
            
            # Restaurar .env
            cp .env.backup .env
            
            # Parar containers
            docker-compose -f docker-compose.prod.yml down
            
            # Rebuild e reiniciar containers
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Executar migrations
            docker exec tickets-api npx prisma migrate deploy
            
            # Limpar recursos não utilizados
            docker system prune -f
            
            # Verificar status
            docker-compose -f docker-compose.prod.yml ps
            
            echo "✅ Deploy concluído com sucesso!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Esperar containers iniciarem
            sleep 10
            
            # Verificar health da API
            curl -f http://localhost:3000/health || exit 1
            
            # Verificar health do Web
            curl -f http://localhost:3001 || exit 1
            
            echo "✅ Verificação de saúde concluída!"

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ Sucesso' : '❌ Falhou';
            const color = '${{ job.status }}' === 'success' ? '28a745' : 'dc3545';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}',
              description: `Deploy para EC2 ${status}`,
              context: 'Deploy EC2'
            });
