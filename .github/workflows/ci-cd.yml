name: CI/CD Pipeline - EC2 Deploy (Optimized with Custom Image)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.18'
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: read
  statuses: write

jobs:
  # Job de testes e build usando imagem customizada
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    # Usar imagem Docker customizada com dependências pré-instaladas
    container:
      image: ghcr.io/tickets-publicos/tickets-transporte-publico-ci:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Dependências já estão na imagem, apenas sincronizar se necessário
      - name: Sync dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      # Prisma Client já foi gerado na imagem, mas regenerar se schema mudou
      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: apps/api

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm check-types

      - name: Run tests (API)
        run: pnpm --filter nest test:full

      # Nota: Testes E2E requerem PostgreSQL configurado
      # Execute localmente com: pnpm --filter nest test:e2e
      # Certifique-se de ter um banco de dados PostgreSQL rodando

      - name: Build applications
        run: pnpm build

  # Job de deploy para EC2
  deploy:
    needs: [test-api, test-web, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          
      - name: Deploy to VM
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          SSH_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${SSH_USER}@${SSH_HOST} "bash ~/tickets-transporte-publico/scripts/deploy-vm.sh"