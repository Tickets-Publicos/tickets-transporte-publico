version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: tickets-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-tickets}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tickets123}
      POSTGRES_DB: ${POSTGRES_DB:-tickets}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tickets-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tickets}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API (NestJS)
  api:
    build:
      context: .
      dockerfile: docker/app-sql/Dockerfile
      args:
        NODE_ENV: production
    container_name: tickets-api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-tickets}:${POSTGRES_PASSWORD:-tickets123}@postgres:5432/${POSTGRES_DB:-tickets}
      NODE_ENV: production
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tickets-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web (Next.js)
  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
    container_name: tickets-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      NODE_ENV: production
    depends_on:
      api:
        condition: service_healthy
    networks:
      - tickets-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tickets-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web
    networks:
      - tickets-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  tickets-network:
    driver: bridge
